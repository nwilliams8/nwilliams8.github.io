//Create two variables that will store the new objects from the class Circlelet circleArray = []; // defines arraylet arraySize = 200; // defines number of objects in arrayfunction setup() { // sets up canvas, sliders and for loop for the array  var canvas = createCanvas(500, 500); // creates canvas 500px by 500px  canvas.parent("myContainer");   background(255); // fills background  aSlider = createSlider(0, 255, 255); // creates slider and defines slider values  aSlider.parent("Slider1");  dSlider = createSlider(0.0005, 10, 1) // creates slider and defines slider values  dSlider.parent("Slider2");  fSlider = createSlider(10, 60, 30) // creates slider and defines slider values  fSlider.parent("Slider3");  for (let i=0; i<arraySize; i++){    circleArray[i] = new Circle(width/2, height/2, random(-0.025, 0.025), random(-0.025, 0.025), random(10));  }}function draw() {  setFrameRate(fSlider.value());  for (let i=0; i<circleArray.length; i++){    circleArray[i].moveFunction();    circleArray[i].displayCircle();  }}//Definition of the class Circleclass Circle{  constructor(x, y, speedX, speedY, size){    this.angle = 0    this.x = x;    this.y = y;    this.speedX = speedX    this.speedY = speedY    this.size = size    this.r = random(225);    this.g = random(225);    this.b = random(225);  }  //Class function that takes care of motion and collision  moveFunction(){    if (this.speedX > 0){      this.x = this.x + cos(this.angle)    } else if (this.speedX < 0) {      this.x = this.x - cos(this.angle)    }    this.y = this.y + sin(this.angle)    this.angle += this.speedX/2    this.angle += this.speedY/2    push();    this.angle += this.speedX * dSlider.value();    this.angle += this.speedY * dSlider.value();    pop();    if (this.x > width || this.x<0){      this.speedX *= -1;    }    if (this.y > (height) || this.y<0){      this.speedY *= -1;    }  }  //Function defined within class that displays each ellipse and fills each shape  displayCircle(){ // defines function    this.fillcol = color(this.r, this.g, this.b, aSlider.value()) // takes RGB values from earlier in the class and takes an alpha value from the slider    fill(this.fillcol) // fills shape    noStroke() // removes shape borders    ellipse(this.x, this.y, this.size, this.size); // draws shape  }}